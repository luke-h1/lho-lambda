name: Deploy
description: Deploy
inputs:
  environment:
    description: "The environment to deploy to"
    required: true
  aws-key-id:
    description: "The AWS key to use"
    required: true
  aws-secret-access-key:
    description: "AWS secret access key to use"
    required: true
runs:
  using: composite
  steps:
    - name: Validate environment
      shell: bash
      run: if [ "${{ inputs.environment }}" != "staging" ] && [ "${{ inputs.environment }}" != "live" ]; then echo "Invalid environment"; exit 1; fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.8"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ inputs.aws-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: eu-west-2
        mask-aws-account-id: true

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.8"

    - name: Terraform init
      shell: bash
      working-directory: terraform
      run: |
        terraform init -backend-config="key=vpc/${{ inputs.environment }}.tfstate" -backend-config="bucket=nowplaying-${{ inputs.environment }}-terraform-state" -input=false

    - name: Deploy DynamoDB lock table if not exists
      shell: bash
      working-directory: terraform
      run: terraform apply -auto-approve -target=aws_dynamodb_table.dynamodb_terraform_lock

    - name: Terraform fmt -check
      shell: bash
      working-directory: terraform
      run: terraform fmt -check

    - name: Terraform validate
      shell: bash
      working-directory: terraform
      run: terraform validate

    - name: Setup version information
      shell: bash
      env:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
      run: |
        chmod +x scripts/version.sh
        ./scripts/version.sh info

    - name: Build .NET Lambda functions
      shell: bash
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh

    - name: Terraform plan
      id: plan
      shell: bash
      working-directory: terraform
      run: terraform plan -no-color -out=tfplan -var="app_version=$VERSION" -var="git_sha=$GIT_SHA"

    - name: Terraform apply
      shell: bash
      working-directory: terraform
      run: terraform apply -auto-approve tfplan
