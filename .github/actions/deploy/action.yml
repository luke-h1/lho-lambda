name: Deploy
description: Deploy
inputs:
  environment:
    description: 'The environment to deploy to'
    required: true
  aws-key-id:
    description: "The AWS key to use"
    required: true
  aws-secret-access-key:
    description: "AWS secret access key to use"
    required: true
runs:
  using: composite
  steps:
    - name: Validate environment
      shell: bash
      run: if [ "${{ inputs.environment }}" != "staging" ] && [ "${{ inputs.environment }}" != "live" ]; then echo "Invalid environment"; exit 1; fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ inputs.aws-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: eu-west-2
        mask-aws-account-id: true

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform init
      shell: bash
      working-directory: terraform
      run: |
        terraform init -backend-config="key=vpc/${{ inputs.environment }}.tfstate" -backend-config="bucket=nowplaying-${{ inputs.environment }}-terraform-state" -input=false

    - name: Terraform fmt -check
      shell: bash
      working-directory: terraform
      run: terraform fmt -check

    - name: Terraform validate
      shell: bash
      working-directory: terraform
      run: terraform validate

    - name: create new pre-release version
      shell: bash
      if: ${{ inputs.environment == 'staging' && github.ref != 'refs/heads/main' }}
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        pnpm lerna version --yes prerelease --allow-branch ${{ github.head_ref }} --preid pre-release-${{ github.run_number }} --no-changelog --force-publish --no-git-tag-version --no-push

    - name: Build lambda
      shell: bash
      run: pnpm build

    - name: Publish packages
      shell: bash
      if: ${{ inputs.environment == 'live' && github.event.inputs.trigger == 'build-release-version' }}
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        pnpm lerna version --yes --conventional-commits --create-release github --changelog-preset conventional-changelog-angular-all --no-push --force-publish
        git push --force --no-verify --follow-tags

    - name: Terraform plan
      id: plan
      shell: bash
      working-directory: terraform
      run: terraform plan -no-color -out=tfplan

    - name: Terraform apply
      shell: bash
      working-directory: terraform
      run: terraform apply -auto-approve tfplan

