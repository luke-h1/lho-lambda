name: Build pre-release version
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, edited, reopened]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  PNPM_VERSION: 8.15.5
  # terraform variables; TODO: move to secretmanager
  TF_VAR_env: staging
  TF_VAR_env_vars: ${{ secrets.LIVE_ENV_VARS }}
  TF_VAR_zone_id: ${{ secrets.LIVE_ZONE_ID }}
  TF_VAR_root_domain: lhowsam.com
  TF_VAR_sub_domain: nowplaying.lhowsam.com
  TF_VAR_private_key: ${{ secrets.STAGING_PRIVATE_KEY }}
  TF_VAR_certificate_body: ${{ secrets.STAGING_CERTIFICATE_BODY }}
  TF_VAR_certificate_chain: ${{ secrets.STAGING_CERTIFICATE_CHAIN }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Install moreutils
        run: sudo apt install moreutils

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Ensure branch is rebased with main
        run: git pull --rebase

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: pnpm

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm i

      - name: Check commit message
        run: pnpm commitlint --from=HEAD^1

      - name: format:check
        run: pnpm format:check

      - name: lint
        run: pnpm lint

      - name: tsc
        run: pnpm tsc

      - name: build lambda
        run: | 
          cd apps/lambda
          pnpm build

  deploy:
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10
    steps:
      - name: Install moreutils
        run: sudo apt install moreutils

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
          mask-aws-account-id: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: pnpm

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm i

      - name: Terraform init
        working-directory: terraform
        run: | 
          terraform init -backend-config="key=vpc/staging.tfstate" -backend-config="bucket=nowplaying-staging-terraform-state" -input=false

      - name: Terraform lint
        working-directory: terraform
        run: terraform fmt -check

      - name: Create new pre-release version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: | 
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          pnpm lerna version --yes prerelease --allow-branch ${{ github.head_ref }} --preid pre-release-${{ github.run_number }} --no-changelog --force-publish --no-git-tag-version --no-push

      - name: build lambda
        run: | 
          cd apps/lambda
          pnpm build
     
      - name: Terraform plan
        id: plan
        working-directory: terraform
        run: terraform plan -no-color -out=tfplan

    #   - name: Update Pull Request
    #     uses: actions/github-script@v7
    #     with:
    #       github-token: ${{ secrets.GH_TOKEN }}
    #       script: |
    #         const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
    #          #### Terraform Initialization ðŸ¤–\`${{ steps.init.outcome }}\`
    #          #### Terraform Validation ðŸ¤–\`${{ steps.validate.outcome }}\`
    #          #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
    #          <details><summary>Show Plan</summary>
    #          \`\`\`\n
    #          ${{ steps.plan.outputs.stdout }}
    #          \`\`\`
    #          </details>
    #           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;   
    #           github.rest.issues.createComment({
    #               issue_number: context.issue.number,
    #               owner: context.repo.owner,
    #               repo: context.repo.repo,
    #               body: output
    #           })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - uses: trstringer/manual-approval@v1
        timeout-minutes: 10
        with:
           secret: ${{ secrets.GH_TOKEN }}
           approvers: luke-h1
           minimum-approvals: 1
           issue-title: "Approve terraform for ${{ github.head_ref }}-${{ github.sha }} prerelease"
           exclude-workflow-initiator-as-approver: false

      - name: get package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
        with:
            path: apps/lambda

      - name: Terraform apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

  discord-message:
    runs-on: ubuntu-latest
    if: success()
    needs: deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Fetch latest commits 
        run: git fetch && git pull

      - name: get package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
        with:
            path: apps/lambda

      - name: Discord success notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        uses: Ilshidur/action-discord@master
        with:
            args: ':white_check_mark: prerelease of lho-lambda - ${{ steps.package-version.outputs.current-version }} successful :white_check_mark:'

  discord-fail-message:
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy
    steps:
      - name: get package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
        with:
            path: apps/lambda

      - name: Discord fail notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        uses: Ilshidur/action-discord@master
        with:
            args: ':red_circle: Build of prerelease lho-lambda - ${{ github.head_ref }} failed :red_circle: URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
